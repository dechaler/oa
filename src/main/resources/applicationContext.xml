<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <!--<context:component-scan base-package="com.de.entity,com.de.controller,com.de.service,com.de.dao"/>-->
    <context:component-scan base-package="com.de" />
    <!--配置数据库相关参数-->
    <context:property-placeholder location="classpath:db.properties" ignore-unresolvable="true"/>

    <!--配置数据源  druid-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${db.driverClassName}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
    </bean>

    <!--配置SQLSessionFactory对象-->
    <!--conf.xml:数据源，mapper.xml-->
    <!--在SpringIoc容器中创建Mybatis的核心类SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!--配置sql：mapper需要的xml文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <!--设置别名-->
        <!--<property name="typeAliasesPackage" value="com.de.entity,com.de.controller,com.de.service,com.de.dao"/>-->
        <property name="typeAliasesPackage" value="com.de"/>

        <!--PageHelper分页插件配置-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <!--使用下面的方式配置参数，一行配置一个 -->
                        <value>
                            <!--params=value1-->
                            <!--helperDialect=mysql //指定分页使用mysql数据库-->
                            reasonable=true   <!--合理化分页-->
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!--开启注解对aop的支持-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!--配置声明式事务-->
    <tx:annotation-driven transaction-manager="txManager" proxy-target-class="true"/>
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <!--<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">-->
        <!--<constructor-arg index="0" ref="sqlSessionFactory"/>-->
    <!--</bean>-->
    <!--将mybatis的SqlSessionFactory交给Spring-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.de.dao"/>
    </bean>

    <!--配置定时器-->

    <!--spring task-->
    <!--spring Task-->
    <!--<task:annotation-driven />-->
    <!--<task:annotation-driven executor="myExecutor" scheduler="myScheduler"/>-->
    <!--<task:executor id="myExecutor" pool-size="5"/>-->
    <!--<task:scheduler id="myScheduler" pool-size="10"/>-->


    <!--Quartz-->

    <!--配置job实例-->
    <!--上班Job-->
    <bean id="InitAttendInfoWithShangBan" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="attendJob"/>
        <property name="targetMethod" value="InitAttendInfoWithShangBan"/>
        <property name="concurrent" value="false"/>
    </bean>

    <!--下班Job-->
    <bean id="InitAttendInfoWithXiaBan" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="attendJob"/>
        <property name="targetMethod" value="InitAttendInfoWithXiaBan"/>
        <property name="concurrent" value="false"/>
    </bean>

    <!--演示job-->
    <!--<bean id="JobExm" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
        <!--<property name="targetObject" ref="jobExm"/>-->
        <!--<property name="targetMethod" value="hello"/>-->
        <!--<property name="concurrent" value="false"/>-->
    <!--</bean>-->
    <!--<bean id="job" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
        <!--<property name="targetObject" ref="jobExm"/>-->
        <!--<property name="targetMethod" value="hello"/>-->
        <!--<property name="concurrent" value="false"/>-->
    <!--</bean>-->

    <!--配置触发器-->
    <!--上班触发器-->
    <bean id="shangbanCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="InitAttendInfoWithShangBan"/>
        <property name="cronExpression" value="0 0 00 * * ? * "/>
    </bean>
    <!--下班触发器-->
    <bean id="xiabanCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="InitAttendInfoWithXiaBan"/>
        <property name="cronExpression" value="0 0 00 * * ? * "/>
    </bean>

    <!--演示触发器-->
    <!--<bean id="jobExmCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">-->
        <!--<property name="jobDetail" ref="JobExm"/>-->
        <!--<property name="cronExpression" value="5,15,25,35,45,55 * * * * ? * "/>-->
    <!--</bean>-->

    <!--配置调度工厂-->

    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean" id="schedulerFactoryBean">
            <property name="triggers">
                <list>
                    <ref bean="shangbanCronTrigger"/>
                    <ref bean="xiabanCronTrigger"/>
                    <!--<ref bean="jobExmCronTrigger"/>-->
                </list>
            </property>
        </bean>


    <!--验证码-->
    <bean class="com.google.code.kaptcha.impl.DefaultKaptcha" >
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <prop key="kaptcha.border">no</prop>
                        <!--<prop key="kaptcha.border.color">105,179,90</prop>-->
                        <prop key="kaptcha.textproducer.font.color">black</prop>
                        <prop key="kaptcha.image.width">125</prop>
                        <prop key="kaptcha.image.height">45</prop>
                        <prop key="kaptcha.textproducer.font.size">30</prop>
                        <prop key="kaptcha.textproducer.char.space">8</prop>
                        <prop key="kaptcha.background.clear.from">white</prop>
                        <prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.ShadowGimpy</prop>
                        <prop key="kaptcha.noise.color">white</prop>
                        <prop key="kaptcha.session.key">code</prop>
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                        <prop key="kaptcha.textproducer.font.names">Arial</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>

</beans>